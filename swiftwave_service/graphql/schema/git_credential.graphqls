type GitCredential {
    id: Uint!
    type: GitType!
    name: String!
    username: String!
    sshPublicKey: String!
    deployments: [Deployment!]!
}

input GitCredentialInput {
    name: String!
    type: GitType!
    username: String!
    password: String!
    sshPrivateKey: String!
}

input GitCredentialRepositoryAccessInput {
    gitCredentialId: Uint!
    repositoryUrl: String!
}


extend type Query {
    gitCredentials: [GitCredential!]! @isAuthenticated
    gitCredential(id: Uint!): GitCredential! @isAuthenticated
    checkGitCredentialRepositoryAccess(input: GitCredentialRepositoryAccessInput!): Boolean! @isAuthenticated
}

extend type Mutation {
    createGitCredential(input: GitCredentialInput!): GitCredential! @isAuthenticated
    updateGitCredential(id: Uint!, input: GitCredentialInput!): GitCredential! @isAuthenticated
    deleteGitCredential(id: Uint!): Boolean! @isAuthenticated
}
