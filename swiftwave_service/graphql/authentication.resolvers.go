package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"
	"net/http"

	echo "github.com/labstack/echo/v4"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.UserCredential) (string, error) {
	// validate input

	if input.Username == "" || input.Password == "" {
		return "", errors.New("username and password cannot be empty")
	}

	user, err := core.FindUserByUsername(ctx, r.ServiceManager.DbClient, input.Username)
	if err != nil {
		return "", errors.New("invalid username or password")
	}
	if !user.CheckPassword(input.Password) {
		return "", errors.New("invalid username or password")
	}

	token, err := core.CreateSession(ctx, r.ServiceManager.DbClient, user)
	if err != nil {
		return "", errors.New("failed to create session")
	}

	// Extract Echo context
	eCtx := ctx.Value("echoContext").(echo.Context)
	eCtx.SetCookie(&http.Cookie{
		Name:     "session_id",
		Value:    token,
		HttpOnly: false,
		Secure:   false,
		Path:     "/",
	})

	return token, nil
}
